Command Line Interface
======================

Installing Schemathesis installs the ``schemathesis`` script to your virtualenv, which you can use to test your APIs

.. note::

    To see the full list of CLI options & commands use the ``--help`` option.

Storing test cases
------------------

It can be useful for debugging purposes to store all requests generated by Schemathesis and all responses from the app into a separate file.
Schemathesis allows you to do this with the ``--cassette-path`` command-line option:

.. code:: bash

    $ st run --cassette-path cassette.yaml http://127.0.0.1/schema.yaml

Schemathesis supports `VCR <https://relishapp.com/vcr/vcr/v/5-1-0/docs/cassettes/cassette-format>`_ and `HAR <http://www.softwareishard.com/blog/har-12-spec/>`_ formats and stores all network interactions in a YAML file.

HAR format
~~~~~~~~~~

HTTP Archive (HAR) is a JSON-based format used for tracking HTTP requests and responses. Schemathesis uses a simplified version of this format that does not include page-related information:

.. code:: json

    {
        "log": {
            "version": "1.2",
            "creator": {
                "name": "harfile",
                "version": "0.2.0"
            },
            "browser": {
                "name": "",
                "version": ""
            },
            "entries": [
                {
                    "startedDateTime": "2024-06-29T20:10:29.254107+02:00",
                    "time": 0.88,
                    "request": {"method": "GET", "url": "http://127.0.0.1:8081/api/basic", "httpVersion": "HTTP/1.1", "cookies": [], "headers": [{"name": "User-Agent", "value": "schemathesis/3.30.4"}, {"name": "Accept-Encoding", "value": "gzip, deflate"}, {"name": "Accept", "value": "*/*"}, {"name": "Connection", "value": "keep-alive"}, {"name": "Authorization", "value": "[Filtered]"}, {"name": "X-Schemathesis-TestCaseId", "value": "ScU88H"}], "queryString": [], "headersSize": 164, "bodySize": 0},
                    "response": {"status": 401, "statusText": "Unauthorized", "httpVersion": "HTTP/1.1", "cookies": [], "headers": [{"name": "Content-Type", "value": "application/json; charset=utf-8"}, {"name": "Content-Length", "value": "26"}, {"name": "Date", "value": "Sat, 29 Jun 2024 18:10:29 GMT"}, {"name": "Server", "value": "Python/3.11 aiohttp/3.9.3"}], "content": {"size": 26, "mimeType": "application/json; charset=utf-8", "text": "{\"detail\": \"Unauthorized\"}"}, "redirectURL": "", "headersSize": 139, "bodySize": 26},
                    "timings": {"send": 0, "wait": 0, "receive": 0.88, "blocked": 0, "dns": 0, "connect": 0, "ssl": 0},
                    "cache": {}
                },
                {

To view the content of a HAR file, you can use this `HAR viewer <http://www.softwareishard.com/har/viewer/>`_.

VCR format
~~~~~~~~~~

The content of a VCR cassette looks like this:

.. code:: yaml

    command: 'st run --cassette-path=cassette.yaml http://127.0.0.1/schema.yaml'
    recorded_with: 'Schemathesis 1.2.0'
    http_interactions:
    - id: '0'
      status: 'FAILURE'
      seed: '1'
      elapsed: '0.00123'
      recorded_at: '2020-04-22T17:52:51.275318'
      checks:
        - name: 'not_a_server_error'
          status: 'FAILURE'
          message: 'Received a response with 5xx status code: 500'
      request:
        uri: 'http://127.0.0.1/api/failure'
        method: 'GET'
        headers:
          ...
        body:
          encoding: 'utf-8'
          string: ''
      response:
        status:
          code: '500'
          message: 'Internal Server Error'
        headers:
          ...
        body:
          encoding: 'utf-8'
          string: '500: Internal Server Error'
        http_version: '1.1'

Schemathesis provides the following extra fields:

- ``command``. Full CLI command used to run Schemathesis.
- ``http_interactions.id``. A numeric interaction ID within the current cassette.
- ``http_interactions.status``. Type of test outcome is one of ``SUCCESS``, ``FAILURE``. The status value is calculated from individual checks statuses - if any check failed, then the final status is ``FAILURE``.
- ``http_interactions.seed``. The Hypothesis seed used in that particular case could be used as an argument to ``--hypothesis-seed`` CLI option to reproduce this request.
- ``http_interactions.elapsed``. Time in seconds that a request took.
- ``http_interactions.checks``. A list of executed checks and and their status.
- ``http_interactions.generator_mode``. The way test case was generated - ``positive`` or ``negative``.

By default, payloads are converted to strings, but similar to the original Ruby's VCR, Schemathesis supports preserving exact body bytes via the ``--cassette-preserve-exact-body-bytes`` option.

To work with the cassette, you could use `yq <https://github.com/mikefarah/yq>`_ or any similar tool.
Show response body content of first failed interaction:

.. code:: bash

    $ yq '.http_interactions.[] | select(.status == "FAILURE") | .response.body.string' foo.yaml | head -n 1
    500: Internal Server Error

Check payload in requests to ``/api/upload_file``:

.. code:: bash

    $ yq '.http_interactions.[] | select(.request.uri == "http://127.0.0.1:8081/api/upload_file").request.body.string'
    --7d4db38ad065994d913cb02b2982e3ba
    Content-Disposition: form-data; name="data"; filename="data"


    --7d4db38ad065994d913cb02b2982e3ba--

If you use ``--cassette-preserve-exact-body-bytes`` then you need to look for the ``base64_string`` field and decode it:

.. code:: bash

    $ yq '.http_interactions.[] | select(.status == "FAILURE") | .response.body.base64_string' foo.yaml | head -n 1 | base64 -d
    500: Internal Server Error

JUnit support
-------------

It is possible to export test results to format, acceptable by such tools as Jenkins.

.. code:: bash

    $ st run --junit-xml=/path/junit.xml http://127.0.0.1/schema.yaml

This command will create an XML at a given path, as in the example below.

.. code:: xml

    <?xml version="1.0" ?>
    <testsuites disabled="0" errors="0" failures="4" tests="4" time="1.7481054730014876">
            <testsuite disabled="0" errors="0" failures="4" name="schemathesis" skipped="0" tests="4" time="1.7481054730014876" hostname="midgard">
                    <testcase name="GET /response-conformance/missing-field" time="0.859204">
                            <failure type="failure" message="1. Test Case ID: JA63GZ

    - Response violates schema

        'age' is a required property

        Schema:

            {
                &quot;type&quot;: &quot;object&quot;,
                &quot;properties&quot;: {
                    &quot;id&quot;: {
                        &quot;type&quot;: &quot;string&quot;
                    },
                    &quot;name&quot;: {
                        &quot;type&quot;: &quot;string&quot;
                    },
                    &quot;age&quot;: {
                        &quot;type&quot;: &quot;integer&quot;
                    }
                },
                &quot;required&quot;: [
                    &quot;id&quot;,
                    &quot;name&quot;,
                    &quot;age&quot;
                ]
            }

        Value:

            {
                &quot;id&quot;: &quot;123&quot;,
                &quot;name&quot;: &quot;Alice&quot;
            }

    [200] OK:

        `{&quot;id&quot;:&quot;123&quot;,&quot;name&quot;:&quot;Alice&quot;}`

    Reproduce with:

        curl -X GET https://example.schemathesis.io/response-conformance/missing-field"/>
                    </testcase>
                    <testcase name="GET /response-conformance/malformed-json" time="0.068179">
                            <failure type="failure" message="1. Test Case ID: Vn5hfI

    - JSON deserialization error

        Expecting property name enclosed in double quotes: line 1 column 2 (char 1)

    [200] OK:

        `{success: true}`

    Reproduce with:

        curl -X GET https://example.schemathesis.io/response-conformance/malformed-json"/>
                    </testcase>
                    <testcase name="GET /response-conformance/undocumented-status-code" time="0.756355">
                            <failure type="failure" message="1. Test Case ID: jm2nOs

    - Undocumented HTTP status code

        Received: 404
        Documented: 200, 400

    [404] Not Found:

        `{&quot;error&quot;:&quot;Not Found&quot;}`

    Reproduce with:

        curl -X GET 'https://example.schemathesis.io/response-conformance/undocumented-status-code?id=1'"/>
                    </testcase>
                    <testcase name="GET /response-conformance/incorrect-content-type" time="0.064367">
                            <failure type="failure" message="1. Test Case ID: Sveexo

    - Undocumented Content-Type

        Received: text/plain
        Documented: application/json

    [200] OK:

        `Success!`

    Reproduce with:

        curl -X GET https://example.schemathesis.io/response-conformance/incorrect-content-type"/>
                    </testcase>
            </testsuite>
    </testsuites>

.. _extend-cli:

Extending CLI
-------------

To fit Schemathesis to your workflows, you might want to extend it with your custom checks or setup environment before the test run.

Extensions should be placed in a separate Python module. 
Then, Schemathesis should be informed about this module via the ``SCHEMATHESIS_HOOKS`` environment variable:

.. code:: bash

    export SCHEMATHESIS_HOOKS=myproject.tests.hooks
    st run http://127.0.0.1/openapi.yaml

Also, depending on your setup, you might need to run this command with a custom ``PYTHONPATH`` environment variable like this:

.. code:: bash

    export PYTHONPATH=$(pwd)
    export SCHEMATHESIS_HOOKS=myproject.tests.hooks
    st run https://example.com/api/swagger.json

The passed value will be treated as an importable Python path and imported before the test run.

.. note::

    You can find more details on how to extend Schemathesis in the :ref:`Extending Schemathesis <enabling-extensions>` section.

Registering custom checks
~~~~~~~~~~~~~~~~~~~~~~~~~

To use your custom checks with Schemathesis CLI, you need to register them via the ``schemathesis.check`` decorator:

.. code:: python

    import schemathesis


    @schemathesis.check
    def new_check(ctx, response, case):
        # some awesome assertions!
        pass

The registered check should accept ``ctx``, a ``response`` with ``schemathesis.Response`` type and
``case`` with ``schemathesis.Case`` type. This code should be placed in the module you pass to the ``SCHEMATHESIS_HOOKS`` environment variable.

Then your checks will be available in Schemathesis CLI, and you can use them via the ``-c`` command-line option.

.. code:: bash

    $ SCHEMATHESIS_HOOKS=module.with.checks
    $ st run -c new_check https://example.com/api/swagger.json

Additionally, checks may return ``True`` to skip the check under certain conditions. For example, you may only want to run checks when the
response code is ``200``.

.. code:: python

    import schemathesis


    @schemathesis.check
    def conditional_check(ctx, response, case):
        if response.status_code == 200:
            ...  # some awesome assertions!
        else:
            # check not relevant to this response, skip test
            return True

Skipped check calls will not be reported in the run summary.

.. note::

    Learn more about writing custom checks :ref:`here <writing-custom-checks>`.

Rate limiting
-------------

APIs implement rate limiting to prevent misuse of their resources.
Schemathesis CLI's ``--rate-limit`` option can be used to set the maximum number of requests per second, minute, hour, or day during testing to avoid hitting these limits.

.. code:: bash

    # 3 requests per second
    st run --rate-limit=3/s
    # 100 requests per minute
    st run --rate-limit=100/m
    # 1000 requests per hour
    st run --rate-limit=1000/h
    # 10000 requests per day
    st run --rate-limit=10000/d
